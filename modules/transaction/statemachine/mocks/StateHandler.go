// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dbclient "ewallet/modules/share/dbclient"
	"ewallet/modules/transaction/statemachine/types"

	mock "github.com/stretchr/testify/mock"
)

// StateHandler is an autogenerated mock type for the StateHandler type
type StateHandler struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *StateHandler) Begin(ctx context.Context) (dbclient.TX, error) {
	ret := _m.Called(ctx)

	var r0 dbclient.TX
	if rf, ok := ret.Get(0).(func(context.Context) dbclient.TX); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbclient.TX)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Handle provides a mock function with given fields: ctx, tx, trans
func (_m *StateHandler) Handle(ctx context.Context, tx dbclient.TX, trans *types.TransDAO) (types.Status, error) {
	ret := _m.Called(ctx, tx, trans)

	var r0 types.Status
	if rf, ok := ret.Get(0).(func(context.Context, dbclient.TX, *types.TransDAO) types.Status); ok {
		r0 = rf(ctx, tx, trans)
	} else {
		r0 = ret.Get(0).(types.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dbclient.TX, *types.TransDAO) error); ok {
		r1 = rf(ctx, tx, trans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
