// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	asset "ewallet/modules/asset"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: ctx, fromCardID, toWalletID, amount
func (_m *TransactionService) Deposit(ctx context.Context, fromCardID int64, toWalletID int64, amount asset.Asset) (int64, error) {
	ret := _m.Called(ctx, fromCardID, toWalletID, amount)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, asset.Asset) int64); ok {
		r0 = rf(ctx, fromCardID, toWalletID, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, asset.Asset) error); ok {
		r1 = rf(ctx, fromCardID, toWalletID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, fromWalletID, toWalletID, amount
func (_m *TransactionService) Transfer(ctx context.Context, fromWalletID int64, toWalletID int64, amount asset.Asset) (int64, error) {
	ret := _m.Called(ctx, fromWalletID, toWalletID, amount)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, asset.Asset) int64); ok {
		r0 = rf(ctx, fromWalletID, toWalletID, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, asset.Asset) error); ok {
		r1 = rf(ctx, fromWalletID, toWalletID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: ctx, fromWalletID, toCardID, amount
func (_m *TransactionService) Withdraw(ctx context.Context, fromWalletID int64, toCardID int64, amount asset.Asset) (int64, error) {
	ret := _m.Called(ctx, fromWalletID, toCardID, amount)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, asset.Asset) int64); ok {
		r0 = rf(ctx, fromWalletID, toCardID, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, asset.Asset) error); ok {
		r1 = rf(ctx, fromWalletID, toCardID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
